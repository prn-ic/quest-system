// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuestSystem.Infrastructure.Data;

#nullable disable

namespace QuestSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuestSystem.Core.Quests.Quest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_id");

                    b.Property<int>("RewardId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_quests");

                    b.HasIndex("RequirementId")
                        .HasDatabaseName("ix_quests_requirement_id");

                    b.HasIndex("RewardId")
                        .HasDatabaseName("ix_quests_reward_id");

                    b.ToTable("quests", (string)null);
                });

            modelBuilder.Entity("QuestSystem.Core.Quests.QuestCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aim")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("aim");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<Guid?>("QuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_quest_condition");

                    b.HasIndex("QuestId")
                        .HasDatabaseName("ix_quest_condition_quest_id");

                    b.ToTable("quest_condition", (string)null);
                });

            modelBuilder.Entity("QuestSystem.Core.Quests.QuestConditionProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConditionId")
                        .HasColumnType("integer")
                        .HasColumnName("condition_id");

                    b.Property<int>("Progress")
                        .HasColumnType("integer")
                        .HasColumnName("progress");

                    b.Property<Guid?>("UserQuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_quest_id");

                    b.HasKey("Id")
                        .HasName("pk_quest_condition_progress");

                    b.HasIndex("ConditionId")
                        .HasDatabaseName("ix_quest_condition_progress_condition_id");

                    b.HasIndex("UserQuestId")
                        .HasDatabaseName("ix_quest_condition_progress_user_quest_id");

                    b.ToTable("quest_condition_progress", (string)null);
                });

            modelBuilder.Entity("QuestSystem.Core.Quests.QuestRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MinimumLevel")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_level");

                    b.HasKey("Id")
                        .HasName("pk_quest_requirement");

                    b.ToTable("quest_requirement", (string)null);
                });

            modelBuilder.Entity("QuestSystem.Core.Quests.QuestReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<List<string>>("Items")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("items");

                    b.HasKey("Id")
                        .HasName("pk_quest_reward");

                    b.ToTable("quest_reward", (string)null);
                });

            modelBuilder.Entity("QuestSystem.Core.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8587ff3-432c-4d91-920e-d1d50c07558e"),
                            Level = 0,
                            Name = "Oleg"
                        });
                });

            modelBuilder.Entity("QuestSystem.Core.Users.UserQuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("GotReward")
                        .HasColumnType("boolean")
                        .HasColumnName("got_reward");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("quest_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_quests");

                    b.HasIndex("QuestId")
                        .HasDatabaseName("ix_user_quests_quest_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_quests_user_id");

                    b.ToTable("user_quests", (string)null);
                });

            modelBuilder.Entity("QuestSystem.Core.Quests.Quest", b =>
                {
                    b.HasOne("QuestSystem.Core.Quests.QuestRequirement", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quests_quest_requirement_requirement_id");

                    b.HasOne("QuestSystem.Core.Quests.QuestReward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quests_quest_reward_reward_id");

                    b.Navigation("Requirement");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("QuestSystem.Core.Quests.QuestCondition", b =>
                {
                    b.HasOne("QuestSystem.Core.Quests.Quest", null)
                        .WithMany("Conditions")
                        .HasForeignKey("QuestId")
                        .HasConstraintName("fk_quest_condition_quests_quest_id");
                });

            modelBuilder.Entity("QuestSystem.Core.Quests.QuestConditionProgress", b =>
                {
                    b.HasOne("QuestSystem.Core.Quests.QuestCondition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quest_condition_progress_quest_condition_condition_id");

                    b.HasOne("QuestSystem.Core.Users.UserQuest", null)
                        .WithMany("ConditionProgresses")
                        .HasForeignKey("UserQuestId")
                        .HasConstraintName("fk_quest_condition_progress_user_quests_user_quest_id");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("QuestSystem.Core.Users.UserQuest", b =>
                {
                    b.HasOne("QuestSystem.Core.Quests.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_quests_quests_quest_id");

                    b.HasOne("QuestSystem.Core.Users.User", null)
                        .WithMany("UserQuests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_quests_users_user_id");

                    b.OwnsOne("QuestSystem.Core.Quests.QuestStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("UserQuestId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("UserQuestId");

                            b1.ToTable("user_quests");

                            b1.WithOwner()
                                .HasForeignKey("UserQuestId")
                                .HasConstraintName("fk_user_quests_user_quests_id");
                        });

                    b.Navigation("Quest");

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("QuestSystem.Core.Quests.Quest", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("QuestSystem.Core.Users.User", b =>
                {
                    b.Navigation("UserQuests");
                });

            modelBuilder.Entity("QuestSystem.Core.Users.UserQuest", b =>
                {
                    b.Navigation("ConditionProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
